/*
COLORS:

Light green: #7ed56f rgb(126, 213, 111) rgba(126, 213, 111, 0.8)
Medium green: #55c57a rgb()
Dark green: #28b485 rgb(40, 180, 131) rgb(40, 180, 131, 0.8)

*/

/* Universal Selector  ----------------------
It will apply to all the elements in the html
*/
* {
    padding: 0;
    margin: 0;
    /* changes the box model, and borders and paddings are not added to the total height or width of an element. */
    box-sizing: border-box;
}





/* BODY -------------------------------------
font-family will be inherited by all the elements contained in body.
Lato font has been included in the html head. It is a google font -> <link href="https://fonts.googleapis.com/css?family=Lato:100,300,400,700,900" rel="stylesheet">
padding is not inherited, it will apply to the body of the entire page
 */
body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    font-size: 16px;
    line-height: 1.7;
    color: #777;
    padding: 30px;
}





/* HEADER -------------------------------------
background-image: can specify two or more images spread by comma, they will be one in top of the other
linear-gradient(to right, #7ed56f, #28b485: set a gradient with: direction, initial color, end color
vh:  means it will fill the height till 95% of the viewport height, it will leave 5% at the botom
cover: no matter the width of the viewport it tries to fit the image inside the box
top: will fix the top of the image when resize
clip-path: clips the image based on a polygon
polygon: defines a polygon with 4 x y coordinates that builds the polygon. It starts from lef top of the element to the right (clockwise)...
 */
.header {
    height: 95vh;
    background-size: cover;
    background: linear-gradient(
            to right bottom,
            rgba(126, 213, 111, 0.8),
            rgba(40, 180, 131, 0.8)),
    url(../img/hero.jpg) top;

    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
    position: relative;
}

/*
absolute: to take a reference from the top left corner of the container.
top / left: the distance of the image from the top and left margins of the container element.
REQUIREMENT: for top and left works as expected, the container element should have the position as relative.
 */
.logo-box {
    position: absolute;
    top: 40px;
    left: 40px;
}

/*
logo:
height / width: we only have to specify one value, the other one is auto calculated.
 */
.logo {
    height: 35px;
}

.logo:hover {
    animation: moveInRight 1s ease-out;
}

/*
The heading text and button container...
absolute: to take a reference from the top left corner of the container.
transform: allows to transform a property of the element.
translate: translates the element to the desired position in reference with itself.
It receives an x y values to translate the element to the final position relative to it self.
text-align: center; Will align all the internal inline elements (<h1> and <a>) to the center.
 */
.text-box {
    position: absolute;
    left: 50%;
    top: 40%;
    transform: translate(-50%, -50%);
    text-align: center;
}

/*
The header text/title
 color y text-transform applies also to heading-primary-main and heading-primary-sub since they are within this element.
 backsafe-visibility: fix a little visual bug on visual element
 */
.heading-primary {
    color: #fff;
    text-transform: uppercase;
    margin-bottom: 60px;
    backsafe-visibility: hidden
}

/*
The header text/title 1
 block: makes the element occupy the entire width
 */
.heading-primary-main {
    display: block;
    font-size: 60px;
    font-weight: 400;
    letter-spacing: 35px;

    animation-name: moveInLeft;
    animation-duration: 1s;
    /*animation-delay: 3s;
    animation-iteration-count: 3;*/
    animation-timing-function: ease-in-out;
}

/*
The header text/title 2
block: makes the element occupy the entire width
 */
.heading-primary-sub {
    display: block;
    font-size: 20px;
    font-weight: 700;
    letter-spacing: 17.4px;

    /*animation-name: moveInRight;
    animation-duration: 1s;
    animation-timing-function: ease-in-out;*/
    animation: moveInRight 1s ease-out;
}

/*
padding: top, right, bottom, left / top & bottom, right & left / all sides
display: inline-block; will force the element to have his own space and no overlap with the other elements. This is important in order to add padding or heights or widths to the elements.

pseudo classes:
:link -> natural state
:visited -> after it has been clicked
:hover -> when mouse over
:active -> on mouse click
Note: a:hover MUST come after a:link and a:visited in the CSS definition in order to be effective! a:active MUST come after a:hover in the CSS definition in order to be effective! Pseudo-class names are not case-sensitive.

transition: porp time; indicates over which properties of each state/pseudo class will animate the transitions. In this case it will animate all the properties on each state from the original state with a duration of .2s.
this example is transitioning the Y and the box-shadow on each state from the previous one, with a duration of .2s.
 */
.btn:link,
.btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 15px 40px;
    display: inline-block;
    border-radius: 100px;
    transition: all .2s;
}

/*
box-shadow: x shadow, y shadow, blur (1-100), color (rgba = r + g +b + alpha)
 */
.btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 20px rgba(0,0,0,.2);
}

.btn:active {
    transform: translateY(-1px);
    box-shadow: 0 5px 10px rgba(0,0,0,.2);
}

.btn-white {
    background-color: #fff;
    color: #777;
}


/* ANIMATIONS -------------------------------------*/
@keyframes moveInLeft {
    0% {
        opacity: 0;
        transform: translateX(-100px);
    }
    80% {
        transform: translateX(10px);
    }
    100% {
        opacity: 1;
        transform: translateX(0px);
    }
}

@keyframes moveInRight {
    0% {
        opacity: 0;
        transform: translateX(100px);
    }
    80% {
        transform: translateX(-10px);
    }
    100% {
        opacity: 1;
        transform: translateX(0px);
    }
}